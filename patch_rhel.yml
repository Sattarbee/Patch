# Debug which package manager is being used
- name: Debug package manager
  debug:
    msg: "ansible_pkg_mgr is {{ ansible_pkg_mgr }}"

# YUM block (if system uses yum)
- name: Upgrade all packages (yum)
  become: true
  ansible.builtin.yum:
    name: '*'
    state: latest
    update_only: true
  when: ansible_pkg_mgr == "yum"
  register: patchingresult

- name: Combine results into single line
  ansible.builtin.set_fact:
    myresults: "{{ myresults | default([]) + [item[0] + ': ' + item[1]] }}"
  loop: "{{ patchingresult.changes.updated | default([]) }}"
  loop_control:
    label: "{{ item[0] }}"
  when:
    - ansible_pkg_mgr == "yum"
    - patchingresult.changes.updated is defined

- name: Display Yum Patching Results
  debug:
    msg: "{{ myresults | default('System is up to date') }}"
  when: ansible_pkg_mgr == "yum"


# DNF block (if system uses dnf)
- name: Upgrade all packages (dnf)
  become: true
  ansible.builtin.dnf:
    name: '*'
    state: latest
    update_only: true
  when: ansible_pkg_mgr == "dnf"
  register: patchingresultdnf

- name: Display DNF Patching Results
  debug:
    msg: "{{ patchingresultdnf.results | default('System is up to date') }}"
  when: ansible_pkg_mgr == "dnf"


# Check for reboot and reboot if needed
- name: Check to see if we need a reboot
  become: true
  ansible.builtin.command:
    cmd: needs-restarting -r
  register: result
  changed_when: result.rc == 1
  failed_when: result.rc > 1
  check_mode: false

- name: Reboot Server if Necessary
  become: true
  ansible.builtin.reboot:
  when: result.rc == 1
